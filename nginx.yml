---
- name: Nginx
  hosts: control
  become: true
  vars_files:
    - "env_vars/nginx.yml"
  tasks:

# BASE
    - name: Ensure base_dir exists.
      ansible.builtin.file:
        path: "{{ nginx_base_dir }}"
        state: directory
        mode: '0755'

    - name: Copy nginx configuration in place.
      ansible.builtin.template:
        src: "nginx/nginx.j2"
        dest: "{{ nginx_data_dir }}/nginx.conf"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Restart docker-compose

# CONF.D
    - name: Ensure nginx_conf.d exists.
      ansible.builtin.file:
        path: "{{ nginx_data_dir }}/conf.d"
        state: directory
        mode: '0755'

    - name: Copy metrics conf
      ansible.builtin.template:
        src: "nginx/metrics.j2"
        dest: "{{ nginx_data_dir }}/conf.d/metrics.conf"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Restart docker-compose

    - name: Copy default host conf
      ansible.builtin.template:
        src: "nginx/default.j2"
        dest: "{{ nginx_data_dir }}/conf.d/0000default.conf"
        owner: root
        group: root
        mode: '0644'
      notify:
        - Restart docker-compose

    - name: Add modules
      ansible.builtin.template:
        src: "nginx/module.j2"
        dest: "{{ nginx_data_dir }}/modules-enabled/{{ item.filename | default(item.module_path.split('/')[-1].split('.')[0] ~ '.conf') }}"
        force: true
        owner: root
        group: root
        mode: '0644'
      when: item.state | default('present') != 'absent'
      with_items: "{{ nginx_modules }}"
      notify:
        - Restart docker-compose

    - name: Add modules conf
      ansible.builtin.template:
        src: "nginx/module_conf.j2"
        dest: "{{ nginx_data_dir }}/conf.d/{{ item.filename | default(item.module_path.split('/')[-1].split('.')[0] ~ '.conf') }}"
        force: true
        owner: root
        group: root
        mode: '0644'
      when: item.state | default('present') != 'absent'
      with_items: "{{ nginx_modules }}"
      notify:
        - Restart docker-compose

# VHOSTS
    - name: Ensure sites-enabled exists.
      ansible.builtin.file:
        path: "{{ nginx_data_dir }}/sites-enabled"
        state: directory
        mode: '0755'

    - name: Add managed vhost config files.
      ansible.builtin.template:
        src: "nginx/vhost.j2"
        dest: "{{ nginx_data_dir }}/sites-enabled/{{ item.filename | default(item.server_name.split(' ')[0] ~ '.conf') }}"
        force: true
        owner: root
        group: root
        mode: '0644'
      when: item.state | default('present') != 'absent'
      with_items: "{{ nginx_vhosts }}"
      notify:
        - Restart docker-compose

    - name: Remove managed vhost config files.
      ansible.builtin.file:
        path: "{{ nginx_data_dir }}/sites-enabled/{{ item.filename | default(item.server_name.split(' ')[0] ~ '.conf') }}"
        state: absent
      when: item.state | default('present') == 'absent'
      with_items: "{{ nginx_vhosts }}"
      notify:
        - Restart docker-compose

# DOCKER-COMPOSE
    - name: Copy dockerfile
      ansible.builtin.template:
        src: nginx/Dockerfile
        dest: "{{ nginx_base_dir }}/Dockerfile"
        mode: '0644'
        owner: root
        group: root
      notify:
        - Restart docker-build
        - Restart docker-compose

    - name: Copy docker-compose.yaml
      ansible.builtin.template:
        src: nginx/docker-compose.yaml
        dest: "{{ nginx_base_dir }}/docker-compose.yaml"
        mode: '0644'
        owner: root
        group: root
      notify:
        - Restart docker-compose

    - name: Run `docker-compose up`
      community.docker.docker_compose:
        project_src: "{{ nginx_base_dir }}"
#        build: true

# RESTART DOCKER-COMPOSE EVERY WEEK
    - name: Créer le fichier de tâche cron pour Docker-compose
      ansible.builtin.cron:
        name: "Restart Docker-compose"
        minute: "0"
        hour: "0"
        weekday: "0"
        user: "root"
        job: "cd {{ nginx_base_dir }} && docker-compose restart"
        cron_file: "docker_compose_restart"

  handlers:
    - name: Restart docker-compose
      community.docker.docker_compose:
        project_src: "{{ nginx_base_dir }}"
        restarted: true
    - name: Restart docker-build
      community.docker.docker_compose:
        project_src: "{{ nginx_base_dir }}"
        build: true
