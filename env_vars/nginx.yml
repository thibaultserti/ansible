---
email: "admin@ayanides.cloud"

nginx_base_dir: /opt/nginx
nginx_data_subpath: data/nginx
nginx_data_dir: "{{nginx_base_dir}}/{{nginx_data_subpath}}"
certbot_data_subpath: data/certbot
certbot_data_dir: "{{nginx_base_dir}}/{{certbot_data_subpath}}"
creds_path: "/var/www/cloudflare/dns_cloudflare_api_token.ini"

nginx_image_tag: 1.27
certbot_image_tag: v2.11.0

certbot_create_command: |-
  certonly --noninteractive
           --dns-cloudflare
           --agree-tos
           --server 'https://acme-v02.api.letsencrypt.org/directory'
           --dns-cloudflare-credentials '{{ creds_path }}'
           -d '*.ayanides.cloud'
           --email {{ email }}



nginx_conf_path: /etc/nginx/conf.d
nginx_conf_file_path: /etc/nginx/nginx.conf
nginx_mime_file_path: /etc/nginx/mime.types
nginx_user: www-data
nginx_error_log: /var/log/nginx/error.log warn
nginx_pidfile: /run/nginx.pid
nginx_vhost_path: /etc/nginx/sites-enabled
nginx_module_path: /etc/nginx/modules-enabled
nginx_upstreams: []

nginx_worker_processes: >-
  "{{ ansible_processor_vcpus | default(ansible_processor_count) }}"
nginx_worker_connections: "1024"
nginx_multi_accept: "off"

nginx_sendfile: "on"
nginx_tcp_nopush: "on"
nginx_tcp_nodelay: "on"

nginx_keepalive_timeout: "75"
nginx_keepalive_requests: "600"

nginx_server_tokens: "on"

nginx_client_max_body_size: "64m"

nginx_server_names_hash_bucket_size: "64"

nginx_proxy_cache_path: ""

nginx_extra_http_options: ""

nginx_extra_conf_options: |
  include {{nginx_module_path}}/*;
nginx_access_log: /var/log/nginx/access.log main
nginx_log_format: |-
  escape=json '{'
    '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
    '"connection": "$connection", ' # connection serial number
    '"connection_requests": "$connection_requests", ' # number of requests made in connection
    '"pid": "$pid", ' # process pid
    '"request_id": "$request_id", ' # the unique request id
    '"request_length": "$request_length", ' # request length (including headers and body)
    '"remote_addr": "$remote_addr", ' # client IP
    '"remote_user": "$remote_user", ' # client HTTP username
    '"remote_port": "$remote_port", ' # client port
    '"time_local": "$time_local", '
    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
    '"request": "$request", ' # full path no arguments if the request
    '"request_uri": "$request_uri", ' # full path and arguments if the request
    '"args": "$args", ' # args
    '"status": "$status", ' # response status code
    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
    '"http_referer": "$http_referer", ' # HTTP referer
    '"http_user_agent": "$http_user_agent", ' # user agent
    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
    '"http_host": "$http_host", ' # the request Host: header
    '"server_name": "$server_name", ' # the name of the vhost serving the request
    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
    '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
    '"scheme": "$scheme", ' # http or https
    '"request_method": "$request_method", ' # request method
    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
    '"gzip_ratio": "$gzip_ratio", '
    '"http_cf_ray": "$http_cf_ray",'
    '"geoip_country_code": "FR"'
  '}'

wildcard_domain: ayanides.cloud
nginx_listen_ipv6: false


nginx_modules: []
  # - module_path: /etc/nginx/modules/ngx_http_opentelemetry_module.so
  #   conf: |
  #     NginxModuleEnabled ON;
  #     NginxModuleOtelSpanExporter otlp;
  #     NginxModuleOtelExporterEndpoint collector:4317;
  #     NginxModuleServiceName nginx;
  #     NginxModuleServiceNamespace default;
  #     NginxModuleServiceInstanceId eros;
  #     NginxModuleResolveBackends ON;
  #     NginxModuleTraceAsError Off;


nginx_vhosts:
# SEMAPHORE
  - server_name: semaphore.ayanides.cloud
    server_name_redirect: semaphore.ayanides.cloud
    listen: 443 ssl
    locations:
      - proxy_pass: http://192.168.1.40:3000
      - proxy_pass: http://192.168.1.40:3000/api/ws
        path: /api/ws
        default: false
        extra_parameters: |
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Origin "";

# PIHOLE
  - server_name: pihole.ayanides.cloud
    server_name_redirect: pihole.ayanides.cloud
    server_name_redirect_exceptions:
      - path: /admin/api.php
        proxy_pass: http://192.168.1.40:8000
    listen: 443 ssl
    locations:
      - proxy_pass: http://192.168.1.40:8000
        redirect_path: /admin


## ---------------- ##
## PUBLIC
## ---------------- ##

# YOPASS
  - server_name: yopass.ayanides.cloud
    server_name_redirect: yopass.ayanides.cloud
    listen: 443 ssl
    public: true
    locations:
      - proxy_pass: http://192.168.1.40:10000
        # extra_parameters: |
        #   proxy_http_version 1.1;
        #   proxy_set_header Upgrade $http_upgrade;
        #   proxy_set_header Connection "upgrade";

# STIRLING-PDF
  - server_name: pdf.ayanides.cloud
    server_name_redirect: pdf.ayanides.cloud
    listen: 443 ssl
    public: true
    locations:
      - proxy_pass: http://192.168.1.40:10001
        extra_parameters: |
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
